- POSTGRESQL

sudo su - postgres  (alias=psql)		# Entra al servidor.
sudo -u usuario psql bbdd			# Entra al servidor y bbdd como usuario.
psql						# Entra a psql dentro del server.
create user nombre with password 'contraseña';	# Ejecutar en psql. Crea usuario.
alter user nombre with superuser;		# Le da al usuario permisos de super user.
ssh grupo99@codd.ing.puc.cl			# Entra al servidor de la U.
createdb nombre_db				# Crea bbdd.
psql nombre_db					# Usar esta bbdd.
\l						# En psql para printear las bbdd.
\d						# En psql para printear las tablas.
\du						# En psql para printear los usuarios.


MODIFICAR TABLAS:

CREATE TABLE nombre (atributo_1 tipo, ..., attributo_n tipo, PRIMARY KEY(atributo_1);
INSERT INTO nombre VALUES(atributo1, ..., atributo_n);	Strings entre comillas simples.
ALTER TABLE nombre DROP COLUMN atributo;
ALTER TABLE nombre ADD COLUMN atributo tipo;
DELETE FROM nombre WHERE condicion;


SQL RELACIONAL

PROYECCION = SELECT DISTINCT atributo_1, ..., atributo_n	# El distinct para que sean conjuntos.
SELECCION = WHERE condicion_1 AND cond_2 OR cond_3
	LIKE = % carios carácteres, _ uno sólo.			# Ej: 'Arturo%'.)
	IN = atributo (NOT) IN consulta				# Ve que esté dentro del conjunto.
	ANY o ALL
PRODUCTO CRUZ = FROM tabla_1, tabla_2
JOIN = SELECT atributos FROM tabla_1, tabla_2 WHERE condicion;
UNION = consulta_1 UNION consulta_2;				# Elimina duplicados porque trabaja con conjuntos.
INTERSECCION = consulta_1 INTERSECT consulta_2
RENAME = consulta AS nuevo_nombre				# También se puede renombrar una agregación. Renombrar subconsultas.
DIFERENCIA = consulta_1 EXCEPT consulta_2


AGREGACION

COUNT(DISTINT atributo)	# Cuenta el número de elementos diferentes.
MAX(atributo)		# Arroja el valor máximo de dicha columna.
MIN(atributo)		# Arroja el valor mínimo de dicha columna.
SUM(atributo)		# Suma cierto atributo numérico al agrupar por otro atributo. Ej: SUM(precio*cantidad) AS total_gastado.
ORDER BY atributo	# Ordena por atributo. ASC o DESC.
GROUP BY atributo	# Agrupa por atributo, incluir todos los que se proyecten. Se una con el COUNT.
HAVING condicion	# Después del GROUP BY y antes del ORDER BY. Es para condicionar agregaciones (no los alias). El COUNT se ejecuta después del WHERE.


